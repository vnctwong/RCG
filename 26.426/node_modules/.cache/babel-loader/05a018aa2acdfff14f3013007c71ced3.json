{"ast":null,"code":"import { useReducer, useCallback } from \"react\";\nconst initalState = {\n  loading: false,\n  error: null,\n  data: null,\n  extra: null,\n  identifier: null\n};\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return {\n        loading: true,\n        error: null,\n        data: null,\n        extra: null,\n        identifier: action.identifier\n      };\n\n    case 'RESPONSE':\n      return { ...curHttpState,\n        loading: false,\n        data: action.responseData,\n        extra: action.extra\n      };\n\n    case 'ERROR':\n      return {\n        loading: false,\n        error: action.errorMessage\n      };\n\n    case 'CLEAR':\n      return initalState;\n\n    default:\n      throw new Error(\"Action type DNE\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, initalState);\n  const clear = useCallback(() => dispatchHttp({\n    type: 'CLEAR'\n  }));\n  const sendRequest = useCallback((url, method, body, reqExtra, reqIdentifier) => {\n    dispatchHttp({\n      type: \"SEND\",\n      identifier: reqIdentifier\n    });\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      dispatchHttp({\n        type: \"RESPONSE\",\n        responseData: responseData,\n        extra: reqExtra\n      });\n    }).catch(error => {\n      dispatchHttp({\n        type: \"ERROR\",\n        errorMessage: \"error message here\"\n      });\n    });\n  }, []);\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra,\n    reqIdentifier: httpState.identifier\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/vwmac/Projects/RCG/26.426/src/components/hooks/http.js"],"names":["useReducer","useCallback","initalState","loading","error","data","extra","identifier","httpReducer","curHttpState","action","type","responseData","errorMessage","Error","useHttp","httpState","dispatchHttp","clear","sendRequest","url","method","body","reqExtra","reqIdentifier","fetch","headers","then","response","json","catch","isLoading"],"mappings":"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","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nconst initalState = {\n  loading: false,\n  error: null,\n  data: null,\n  extra: null,\n  identifier: null\n};\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return { loading: true, error: null, data: null, extra: null, identifier: action.identifier };\n    case 'RESPONSE':\n      return { ...curHttpState, loading: false, data: action.responseData, extra: action.extra };\n    case 'ERROR':\n      return { loading: false, error: action.errorMessage };\n    case 'CLEAR':\n      return initalState;\n    default:\n      throw new Error(\"Action type DNE\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, initalState);\n\n  const clear = useCallback(() => dispatchHttp({ type: 'CLEAR' }));\n\n  const sendRequest = useCallback(\n    (url, method, body, reqExtra, reqIdentifier) => {\n      dispatchHttp({ type: \"SEND\", identifier: reqIdentifier });\n      fetch(url, {\n        method: method,\n        body: body,\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n        .then(response => {\n          return response.json();\n        })\n        .then(responseData => {\n          dispatchHttp({ type: \"RESPONSE\", responseData: responseData, extra: reqExtra });\n        })\n        .catch(error => {\n          dispatchHttp({ type: \"ERROR\", errorMessage: \"error message here\" });\n        });\n    }, []\n  );\n\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra,\n    reqIdentifier: httpState.identifier\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}