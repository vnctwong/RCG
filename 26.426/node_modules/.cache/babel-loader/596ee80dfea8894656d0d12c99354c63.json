{"ast":null,"code":"var _jsxFileName = \"/Users/vwmac/Projects/RCG/26.426/src/components/Ingredients/Ingredients.js\";\nimport React, { useReducer, useEffect, useCallback, useMemo } from 'react';\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\nimport Search from './Search';\n\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('Should not reach here');\n  }\n}; // const httpReducer = (curHttpState, action) => {\n//   switch (action.type) {\n//     case 'SEND':\n//       return { loading: true, error: null };\n//     case 'RESPONSE':\n//       return { ...curHttpState, loading: false };\n//     case 'ERROR':\n//       return { loading: false, error: action.errorMessage }\n//     case 'CLEAR':\n//       return { ...curHttpState, error: null }\n//     default:\n//       throw new Error('Action type DNE');\n//   }\n// };\n\n\nconst Ingredients = () => {\n  // const [userIngredients, setUserIngredients] = useState([]);\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []); // const [isLoading, setIsLoading] = useState(false);\n  // const [httpState, dispatchHttp] = useReducer(httpReducer, { loading: false, error: null });\n  // const [error, setError] = useState();\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]);\n  const filteredIngredientsHandler = useCallback(filteredIngredients => {\n    // setUserIngredients(filteredIngredients);\n    dispatch({\n      type: 'SET',\n      ingredients: filteredIngredients\n    });\n  }, []);\n  const addIngredientHandler = useCallback(ingredient => {\n    // setIsLoading(true);\n    dispatchHttp({\n      type: 'SEND'\n    });\n    fetch('https://rcg-26-426-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // setIsLoading(false);\n      dispatchHttp({\n        type: 'RESPONSE'\n      });\n      return response.json();\n    }).then(responseData => {\n      // setUserIngredients(prevIngredients => [\n      //   ...prevIngredients,\n      //   { id: responseData.name, ...ingredient }\n      // ]);\n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      });\n    });\n  }, []);\n  const removeIngredientHandler = useCallback(ingredientId => {\n    // setIsLoading(true);\n    dispatchHttp({\n      type: 'SEND'\n    });\n  }, []);\n  const clearError = useCallback(() => {\n    // setError(null);\n    dispatchHttp({\n      type: 'CLEAR'\n    });\n  }, []);\n  const ingredientList = useMemo(() => {\n    return /*#__PURE__*/React.createElement(IngredientList, {\n      ingredients: userIngredients,\n      onRemoveItem: removeIngredientHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    });\n  }, [userIngredients, removeIngredientHandler]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, httpState.error && /*#__PURE__*/React.createElement(ErrorModal, {\n    onClose: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }\n  }, httpState.error), /*#__PURE__*/React.createElement(IngredientForm, {\n    onAddIngredient: addIngredientHandler,\n    loading: httpState.loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    onLoadIngredients: filteredIngredientsHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), ingredientList));\n};\n\nexport default Ingredients;","map":{"version":3,"sources":["/Users/vwmac/Projects/RCG/26.426/src/components/Ingredients/Ingredients.js"],"names":["React","useReducer","useEffect","useCallback","useMemo","IngredientForm","IngredientList","ErrorModal","Search","ingredientReducer","currentIngredients","action","type","ingredients","ingredient","filter","ing","id","Error","Ingredients","userIngredients","dispatch","console","log","filteredIngredientsHandler","filteredIngredients","addIngredientHandler","dispatchHttp","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","removeIngredientHandler","ingredientId","clearError","ingredientList","httpState","error","loading"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useCallback, useMemo } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\nimport Search from './Search';\n\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n    default:\n      throw new Error('Should not reach here');\n  }\n}\n\n// const httpReducer = (curHttpState, action) => {\n//   switch (action.type) {\n//     case 'SEND':\n//       return { loading: true, error: null };\n//     case 'RESPONSE':\n//       return { ...curHttpState, loading: false };\n//     case 'ERROR':\n//       return { loading: false, error: action.errorMessage }\n//     case 'CLEAR':\n//       return { ...curHttpState, error: null }\n//     default:\n//       throw new Error('Action type DNE');\n//   }\n// };\n\nconst Ingredients = () => {\n  // const [userIngredients, setUserIngredients] = useState([]);\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [httpState, dispatchHttp] = useReducer(httpReducer, { loading: false, error: null });\n  // const [error, setError] = useState();\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]);\n\n  const filteredIngredientsHandler = useCallback(filteredIngredients => {\n    // setUserIngredients(filteredIngredients);\n    dispatch({ type: 'SET', ingredients: filteredIngredients });\n  }, []);\n\n  const addIngredientHandler = useCallback(ingredient => {\n    // setIsLoading(true);\n    dispatchHttp({ type: 'SEND' })\n    fetch('https://rcg-26-426-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(ingredient),\n      headers: { 'Content-Type': 'application/json' }\n    })\n      .then(response => {\n        // setIsLoading(false);\n        dispatchHttp({ type: 'RESPONSE' })\n        return response.json();\n      })\n      .then(responseData => {\n        // setUserIngredients(prevIngredients => [\n        //   ...prevIngredients,\n        //   { id: responseData.name, ...ingredient }\n        // ]);\n        dispatch({ type: 'ADD', ingredient: { id: responseData.name, ...ingredient } });\n      });\n  }, []);\n\n  const removeIngredientHandler = useCallback(ingredientId => {\n    // setIsLoading(true);\n    dispatchHttp({ type: 'SEND' })\n\n  }, []);\n\n  const clearError = useCallback(() => {\n    // setError(null);\n    dispatchHttp({ type: 'CLEAR' })\n  }, []);\n\n  const ingredientList = useMemo(() => {\n    return (\n      <IngredientList\n        ingredients={userIngredients}\n        onRemoveItem={removeIngredientHandler}\n      />\n    )\n  }, [userIngredients, removeIngredientHandler]);\n\n  return (\n    <div className=\"App\">\n      {httpState.error && <ErrorModal onClose={clearError}>{httpState.error}</ErrorModal>}\n\n      <IngredientForm\n        onAddIngredient={addIngredientHandler}\n        loading={httpState.loading}\n      />\n\n      <section>\n        <Search onLoadIngredients={filteredIngredientsHandler} />\n        {ingredientList}\n      </section>\n    </div>\n  );\n};\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}