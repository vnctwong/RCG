{"ast":null,"code":"import { useReducer, useCallback } from \"react\";\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case \"SEND\":\n      return {\n        loading: true,\n        error: null,\n        data: null,\n        extra: null\n      };\n\n    case \"RESPONSE\":\n      return { ...curHttpState,\n        loading: false,\n        data: action.responseData,\n        extra: action.extra\n      };\n\n    case \"ERROR\":\n      return {\n        loading: false,\n        error: action.errorMessage\n      };\n\n    case \"CLEAR\":\n      return { ...curHttpState,\n        error: null\n      };\n\n    default:\n      throw new Error(\"Action type DNE\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    loading: false,\n    error: null,\n    data: null,\n    extra: null,\n    identifier: null\n  });\n  const sendRequest = useCallback((url, method, body, reqExtra, identifier) => {\n    dispatchHttp({\n      type: \"SEND\",\n      identifier: identifier\n    });\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      dispatchHttp({\n        type: \"RESPONSE\",\n        responseData: responseData,\n        extra: reqExtra\n      });\n    }).catch(error => {\n      dispatchHttp({\n        type: \"ERROR\",\n        errorMessage: \"error message here\"\n      });\n    });\n  }, []);\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/vwmac/Projects/RCG/26.426/src/components/hooks/http.js"],"names":["useReducer","useCallback","httpReducer","curHttpState","action","type","loading","error","data","extra","responseData","errorMessage","Error","useHttp","httpState","dispatchHttp","identifier","sendRequest","url","method","body","reqExtra","fetch","headers","then","response","json","catch","isLoading"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAEA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,KAAK,EAAE,IAAxB;AAA8BC,QAAAA,IAAI,EAAE,IAApC;AAA0CC,QAAAA,KAAK,EAAE;AAAjD,OAAP;;AACF,SAAK,UAAL;AACE,aAAO,EAAE,GAAGN,YAAL;AAAmBG,QAAAA,OAAO,EAAE,KAA5B;AAAmCE,QAAAA,IAAI,EAAEJ,MAAM,CAACM,YAAhD;AAA8DD,QAAAA,KAAK,EAAEL,MAAM,CAACK;AAA5E,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEH,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEH,MAAM,CAACO;AAAhC,OAAP;;AACF,SAAK,OAAL;AACE,aAAO,EAAE,GAAGR,YAAL;AAAmBI,QAAAA,KAAK,EAAE;AAA1B,OAAP;;AACF;AACE,YAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;AAVJ;AAYD,CAbD;;AAeA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,UAAU,CAACE,WAAD,EAAc;AACxDI,IAAAA,OAAO,EAAE,KAD+C;AAExDC,IAAAA,KAAK,EAAE,IAFiD;AAGxDC,IAAAA,IAAI,EAAE,IAHkD;AAIxDC,IAAAA,KAAK,EAAE,IAJiD;AAKxDO,IAAAA,UAAU,EAAE;AAL4C,GAAd,CAA5C;AAQA,QAAMC,WAAW,GAAGhB,WAAW,CAAC,CAACiB,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,QAApB,EAA8BL,UAA9B,KAA6C;AAC3ED,IAAAA,YAAY,CAAC;AAAEV,MAAAA,IAAI,EAAE,MAAR;AAAgBW,MAAAA,UAAU,EAAEA;AAA5B,KAAD,CAAZ;AACAM,IAAAA,KAAK,CAACJ,GAAD,EAAM;AACTC,MAAAA,MAAM,EAAEA,MADC;AAETC,MAAAA,IAAI,EAAEA,IAFG;AAGTG,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHA,KAAN,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAPH,EAQGF,IARH,CAQQd,YAAY,IAAI;AACpBK,MAAAA,YAAY,CAAC;AAAEV,QAAAA,IAAI,EAAE,UAAR;AAAoBK,QAAAA,YAAY,EAAEA,YAAlC;AAAgDD,QAAAA,KAAK,EAAEY;AAAvD,OAAD,CAAZ;AACD,KAVH,EAWGM,KAXH,CAWSpB,KAAK,IAAI;AACdQ,MAAAA,YAAY,CAAC;AAAEV,QAAAA,IAAI,EAAE,OAAR;AAAiBM,QAAAA,YAAY,EAAE;AAA/B,OAAD,CAAZ;AACD,KAbH;AAcD,GAhB8B,EAgB5B,EAhB4B,CAA/B;AAkBA,SAAO;AACLiB,IAAAA,SAAS,EAAEd,SAAS,CAACR,OADhB;AAELE,IAAAA,IAAI,EAAEM,SAAS,CAACN,IAFX;AAGLD,IAAAA,KAAK,EAAEO,SAAS,CAACP,KAHZ;AAILU,IAAAA,WAAW,EAAEA,WAJR;AAKLI,IAAAA,QAAQ,EAAEP,SAAS,CAACL;AALf,GAAP;AAOD,CAlCD;;AAoCA,eAAeI,OAAf","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case \"SEND\":\n      return { loading: true, error: null, data: null, extra: null };\n    case \"RESPONSE\":\n      return { ...curHttpState, loading: false, data: action.responseData, extra: action.extra };\n    case \"ERROR\":\n      return { loading: false, error: action.errorMessage };\n    case \"CLEAR\":\n      return { ...curHttpState, error: null };\n    default:\n      throw new Error(\"Action type DNE\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    loading: false,\n    error: null,\n    data: null,\n    extra: null,\n    identifier: null\n  });\n\n  const sendRequest = useCallback((url, method, body, reqExtra, identifier) => {\n    dispatchHttp({ type: \"SEND\", identifier: identifier });\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: { \"Content-Type\": \"application/json\" }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(responseData => {\n        dispatchHttp({ type: \"RESPONSE\", responseData: responseData, extra: reqExtra });\n      })\n      .catch(error => {\n        dispatchHttp({ type: \"ERROR\", errorMessage: \"error message here\" });\n      });\n  }, []);\n\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}